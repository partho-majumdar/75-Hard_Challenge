There are 2 reason using SQL for Data Cleaning
    - Data are in database so basic cleaning in database 
    - SQL is comfortable for large amount of data

    - SQL database programming language and MySQL is database


~ ~ ~ ---------- Strings ---------- ~ ~ ~

    - String Data Type 
        - Numerical
            - Int
            - Decimal 
        - Textual
            - Char (Fixed size 10 Char) -> phone number
            - Varchar (if don't know what will be the exact number of character) -> user name / address
            - Text (can store up to 65535 word) -> blog post / comment
            - Mediumtext (can store up to 16777215) -> long form article / legal documents
            - Longtext (can store up to 4294967295) -> entire book / large collection of data 
        - Temporal
            - Date 
            - Time


~ ~ ~ ---------- Wildcards ---------- ~ ~ ~

    - LIKE (pattern match)
    - use with 2 wildcard 
        - percentage (%) -> represent zero / one / more character
        - underscore (_) -> represent single character 

    - give me the name of movie that have 5 character
SELECT name
FROM movies
WHERE name LIKE '_____'

    - movie name start with 'a' and had 5 character
SELECT name
FROM movies
WHERE name LIKE 'a____'

    - movie name that have 'man' word
SELECT name
FROM movies
WHERE name LIKE '%man%'

    - movie name starts with 'man'
SELECT name
FROM movies
WHERE name LIKE 'man%'

    - movie name end with 'man'
SELECT name
FROM movies
WHERE name LIKE '%man'


~ ~ ~ ---------- String Functions ---------- ~ ~ ~

    -- Upper & Lower --
SELECT name,
UPPER(name), LOWER(name)
FROM movies

    -- CONCAT & CONCAT_WS --
SELECT CONCAT (name, ' ', director) FROM movies
SELECT CONCAT_WS ('-', name, director, star) FROM movies

    -- SUBSTR (find sub string from text) --
SELECT name, SUBSTR(name, 1, 5) FROM movies -> from 1st char to next 5 char
SELECT name, SUBSTR(name, 5) FROM movies -> from 5th char to end 
SELECT name, SUBSTR(name, -5, 2) FROM movies -> from last 5th char to next 2 char 

    -- REPLACE -- 
    - replace 'man' with 'women'
SELECT name, REPLACE(name, 'man', 'women') 
FROM movies

    -- REVERSE --
SELECT REVERSE(name) FROM movies

    - find palindrome
SELECT name FROM movies
WHERE name = REVERSE(name)

    -- CHAR_LENGTH / LENGTH -- 
    - CHAR_LENGTH -> simply return character
    - LENGTH -> return length of a string in byte (count special language)
SELECT name, CHAR_LENGTH(name), LENGTH(name) FROM movies
WHERE CHAR_LENGTH(name) != LENGTH(name)

    -- INSERT -- -> insert substring in particular position
    (str, pos, len, newstr)
SELECT INSERT("This is a string", 3, 0, "Hello") -> this is for replace
SELECT INSERT("This is a string", 3, 5, "Hello") -> this is for insert 

    -- LEFT & RIGHT --
    - first 3 char from movie
SELECT name, LEFT(name, 3) FROM movies

    - last 3 char from movie 
SELECT name, RIGHT(name, 3) FROM movies

    -- REPEAT -- 
    - write movie name 3 times 
SELECT name, REPEAT(name, 3) FROM movies

    -- TRIM -- -> remove leading and trailing space (LTRIM, RTRIM)
SELECT TRIM("     Hello   World     ")
SELECT TRIM(BOTH '.' FROM "..........Hello World........")
SELECT TRIM(LEADING '.' FROM "..........Hello World........")
SELECT TRIM(TRAILING '.' FROM "..........Hello World........") 

    -- SUBSTRING_INDEX -- -> similar to "split"
SELECT SUBSTRING_INDEX("www.sqlquery.com", '.', 1)
SELECT SUBSTRING_INDEX("www.sqlquery.com", '.', 2)

    -- STRCMP -- -> compare according to alphabet
        - str1 < str2 = -ve value
        - str1 > str2 = +ve value 
        - str1 = str2 = 0
SELECT STRCMP("Dhaka", "Khulna") -> -1

    -- LOCATE -- -> return index of substring
SELECT LOCATE ("w", "Hw world")

    -- LPAD / RPAD --
SELECT LPAD("7777777777", 13, "+88") -> +887777777777
SELECT RPAD("7777777777", 13, "+88") -> 7777777777+88


~ ~ ~ ---------- Data Cleaning In SQL ---------- ~ ~ ~

    01. Create a backup
CREATE TABLE laptop_backup LIKE laptopdata
INSERT INTO laptop_backup SELECT * FROM laptopdata

    02. Check memory consumption
SELECT DATA_LENGTH / 1024 FROM information_schema.TABLES
WHERE TABLE_SCHEMA = 'sql_eda'
AND TABLE_NAME = 'laptopdata'

    03. Drop non-important column
ALTER TABLE laptopdata DROP COLUMN `Unnamed: 0`

    04. Drop all null value
DELETE FROM laptopdata 
WHERE `index` IN (
SELECT `index` FROM laptopdata
WHERE Company IS NULL AND TypeName IS NULL AND Inches IS NULL 
AND ScreenResolution IS NULL AND Cpu IS NULL AND Ram IS NULL
AND Memory IS NULL AND Gpu IS NULL AND OpSys IS NULL 
AND Weight IS NULL AND Price IS NULL
)